===========================================
   üéµ CHORD ATLAS ‚Äî DOCKER QUICK START
===========================================

This project runs a full stack music library app in Docker containers.
It includes:
  ‚Ä¢ MySQL 8.0 database
  ‚Ä¢ Node/Express backend (TypeScript)
  ‚Ä¢ React + Vite frontend

The stack is managed through Docker Compose.

------------------------------------------------------------
üß© 1. PREREQUISITES
------------------------------------------------------------

‚Ä¢ Docker and Docker Compose installed.
‚Ä¢ The `.env` files (optional) configured for dev if needed.
‚Ä¢ The database will automatically initialize from `init-sql/seed.sql`
  on first run.

------------------------------------------------------------
üöÄ 2. RUNNING IN DEVELOPMENT MODE
------------------------------------------------------------

This mode runs everything in "live" development:
  - Frontend runs `vite` on port 5173
  - Backend runs `ts-node-dev` on port 5000
  - MySQL runs on port 3306 with persistent volume

Commands:

  # Start the dev stack (with auto-reload for code changes)
  docker compose -f docker-compose.dev.yml up --build

  # View logs
  docker compose -f docker-compose.dev.yml logs -f

  # Stop the containers
  docker compose -f docker-compose.dev.yml down

  # Stop and remove volumes (including MySQL data)
  docker compose -f docker-compose.dev.yml down -v

Access points:

  ‚Ä¢ Frontend: http://localhost:5173
  ‚Ä¢ Backend API: http://localhost:5000/api
  ‚Ä¢ MySQL: localhost:3306 (user: root / pass: rootpass)

Your local source code is bind-mounted into the containers,
so any edits to files in `/frontend` or `/backend` instantly
trigger hot-reload (no rebuild needed).

------------------------------------------------------------
üß± 3. RUNNING IN PRODUCTION MODE
------------------------------------------------------------

When ready to test or deploy production images:

  # Build and run production images
  docker compose -f docker-compose.yml up --build -d

  # View running containers
  docker compose ps

  # Stop everything
  docker compose down

This mode uses the Dockerfiles for `backend` and `frontend`
to build optimized, production-ready containers.

The frontend is served as a static bundle using `serve`,
and the backend runs compiled JS (`dist/index.js`).

------------------------------------------------------------
üßπ 4. CLEANUP COMMANDS
------------------------------------------------------------

  # Remove all stopped containers
  docker container prune -f

  # Remove unused images
  docker image prune -f

  # Remove unused volumes
  docker volume prune -f

------------------------------------------------------------
üß≠ 5. DATABASE ACCESS
------------------------------------------------------------

To inspect or modify your MySQL data directly:

  docker exec -it chordatlas-db mysql -u root -p
  # password: rootpass

  USE chordatlas;
  SHOW TABLES;
  DESCRIBE songs;

------------------------------------------------------------
üõ†Ô∏è 6. COMMON TROUBLESHOOTING
------------------------------------------------------------

‚Ä¢ If ports 5173 or 5000 are already in use:
    - Stop existing stacks: `docker compose down`
    - Or change ports in the corresponding compose file.

‚Ä¢ If changes aren't reflected:
    - Check that you are using the dev compose file.
    - Ensure `volumes:` entries mount your code correctly.

‚Ä¢ If database fails to connect on startup:
    - The backend waits briefly for MySQL.
    - If needed, restart backend after db is healthy:
        docker compose restart backend

------------------------------------------------------------
üéâ 7. SUMMARY
------------------------------------------------------------

Development Mode:
    docker compose -f docker-compose.dev.yml up --build

Production Mode:
    docker compose -f docker-compose.yml up --build -d

Access:
    Frontend ‚Üí http://localhost:5173
    Backend  ‚Üí http://localhost:5000/api
    Database ‚Üí localhost:3306 (root/rootpass)

Happy coding! üé∏
